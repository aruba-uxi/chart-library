# TODO: could add additional label in each asimmetric
# TODO: add external IP service type
# TODO: add external name service type
asimmetric:
  ## Global values used by all manifests
  ##
  global:
    ## The repository that this chart is kept in
    ##
    repository: asimmetric-example
    ## The environment that the service is deployed in
    ## DEV|STAGING|PRODUCTION
    ##
    environment: DEV
    ## Configures the image repository and pull policy for all pods
    ##
    image:
      repository: asimmetric-example
      tag: "1.2.3"
      pullPolicy: IfNotPresent
    ## Creates a sealed image pull secret
    ##
    sealedImagePullSecret: sealed_version_of_the_base64_encoded_dockerconfigjson
    ## Basic environment variables (Optional)
    ## If overridden, in application or cronjobs, precedence is given to the overridden values
    ## Default: None
    ##
    env:
      OVERRIDDEN_VALUE: global-value
    ## Environment variables set from the deployment fields (Optional)
    ## If overridden, in application or cronjobs, precedence is given to the overridden values
    ## Default: None
    ##
    envFields:
      HOST_IP: global-value
      OVERRIDDEN_FIELD_VALUE: global-value
    ## Environment variables set from sealed secrets (Optional)
    ## If overridden, in application or cronjobs, precedence is given to the overridden values
    ## A sealed secret is created for each envSealedSecrets.<value>
    ## NB! These can be overridden at the secret name level and no lower. 
    ## E.g aws-access can be overridden but you can not define aws-access.AWS_REGION here 
    ## and aws-access.AWS_ACCESS_ID in the pod
    ## You must override the whole sealed secret
    ## Default: None
    ##
    envSealedSecrets:
      overridden-secret:
        OVERRIDDEN_VALUE: global-value
      aws-access:
        AWS_REGION: global-value
        AWS_ACCESS_ID: global-value
  ## Creates one or more applications unique by role.
  ## Applications are defined as keys in the applications map
  ## The key is used as the name of the application and subsequent objects created
  ##
  applications:

    example-service:
      ## The application role
      ## The difference between a webapp and worker is the worker does not have ports exposed. 
      ## I.e a worker does not get a Service manifest defined
      ## Valid roles: webapp | worker
      ##
      role: webapp
      ## Sets the replica count (Optional)
      ## Default: 1
      ##
      replicaCount: 1
      ## Configures the image and image pull policy (Optional)
      ## Default: uses .global.image
      ##
      image: {}
        # repository: nginx
        # pullPolicy: IfNotPresent
        # tag: ""
      ## Attaches a service account it to the application (Optional)
      ## Default: uses the default service account in the namespace
      ##
      serviceAccount:
        create: true
        # name: service-account-name
        # annotations: {} 
      ## Overrides the command from the dockerfile (Optional)
      ## Default: the Dockerfile command is used
      ##
      command: []
      ## Which port on the pod is exposed.
      ## NB! for 'role: worker' do not set this
      ##
      port: 8000
      ## Configures the service created (Optional)
      ## Default: ClusterIP on port 80
      ##
      service: {}
        # type: ClusterIP
        # port: 80
      ## Enables the liveness probe on the specified path (Optional)
      ## NB! for 'role:worker' this should be excluded
      ##
      livenessProbe:
        path: /livez
      ## Enables the readiness probe on the specified path (Optional)
      ## NB! for 'role:worker' this should be excluded
      ##
      readinessProbe:
        path: /readyz
      ## Configure the pod resources (Optional)
      ## Default: lets kubernetes set the resources
      ##
      resources: {}
        # limits:
        #   cpu: 100m
        #   memory: 256Mi
        # requests:
        #   cpu: 100m
        #   memory: 128Mi
      ## Configures the node selectors for the pods (Optional)
      ## Default: None
      ##
      nodeSelector: {}
      ## Configures the tolerations for the pods (Optional)
      ## Default: None
      ##
      tolerations: []
      ## Configures the pod affinity for the pods (Optional)
      ## Default: None
      ##
      affinity: {}
      ## Configures the security context for the pods (Optional)
      ## Default: None
      ##
      securityContext: {}
        # runAsUser: 1000
        # runAsGroup: 3000
        # fsGroup: 2000
      ## Adds a config map to the application (Optional)
      ## Default: None
      ###
      configMap:
        annotations: {}
        readOnly: false
        path: /app/config
        data:
          config.json: |
            {
              foo: bar
              bing: bang
              server: {
                host: hostname
              }
            }
      ## Environment variables set from provided key:value pair (Optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## Default: None
      ##
      env:
        AWS_DEFAULT_REGION: example-service
        OVERRIDDEN_VALUE: example-service
      ## Environment variables set from the deployment fields (Optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## Default: None
      ##
      envFields:
        HOST_IP: example-service
        OVERRIDDEN_FIELD_VALUE: example-service
      ## Environment variables set from sealed secrets (Optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## A sealed secret is created for each envSealedSecrets.<value>
      ## Default: None
      ##
      envSealedSecrets:
        overridden-secret:
          OVERRIDDEN_VALUE: example-service
        database-url:
          DATABASE_URL: example-service

    example-worker:
      ## Asimmetric application role: webapp|worker
      ## The difference between a webapp and worker is the worker does not have ports exposed. 
      ## I.e a worker does not get a Service manifest defined
      ##
      role: worker
      ## Attaches a service account it to the application (Optional)
      ## Default: uses the default service account in the namespace
      ##
      serviceAccount:
        name: example-worker-external-service-account
        # annotations: {} 
      ## Overrides the command from the dockerfile (Optional)
      ## Default: the Dockerfile command is used
      ##
      command: ["echo", "foo bar biz"]
      ## Adds a config map to the application (Optional)
      ## Default: None
      ###
      configMap:
        annotations: {}
        readOnly: false
        path: /app/config
        data:
          config.json: |
            "hello worker"
      ## Environment variables set from provided key:value pair (Optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## Default: None
      ##
      env:
        AWS_DEFAULT_REGION: example-service
        OVERRIDDEN_VALUE: example-service

  ## Creates one or more cronjobs.
  ## Cronjobs are defined as keys in the applications map
  ## The key is used as the name of the cronjob and subsequent objects created
  ##
  cronjobs:

    example-cronjob-producer:
      ## The schedule for the cronjob
      ##
      schedule: "*/10 * * * *"
      ## Configures the image and image pull policy (Optional)
      ## Default: uses .global.image
      ##
      image: {}
      ## Overrides the command from the dockerfile (Optional)
      ## Default: the Dockerfile command is used
      ##
      command: ["run-kinesis", "producer"]
      ## Attaches a service account it to the application (Optional)
      ## Default: uses the default service account in the namespace
      ##
      serviceAccount:
        create: true
        name: example-cronjob-producer-service-account
        # annotations: {} 
      ## Whether the cronjob should restart if a job fails
      ##
      restartPolicy: OnFailure
      ## Environment variables set from provided key:value pair (Optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## Default: None
      ##
      env:
        AWS_DEFAULT_REGION: example-cronjob-producer
        OVERRIDDEN_VALUE: example-cronjob-producer
      ## Environment variables set from the deployment fields (Optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## Default: None
      ##
      envFields:
        HOST_IP: example-cronjob-producer
        OVERRIDDEN_FIELD_VALUE: example-cronjob-producer
      ## Environment variables set from sealed secrets (Optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## A sealed secret is created for each envSealedSecrets.<value>
      ## Default: None
      ##
      envSealedSecrets:
        overridden-secret:
          OVERRIDDEN_VALUE: example-cronjob-producer
        database-url:
          DATABASE_URL: example-cronjob-producer

    example-cronjob-consumer:
      ## The schedule for the cronjob
      ##
      schedule: "*/5 * * * *"
      ## Overrides the command from the dockerfile (Optional)
      ## Default: the Dockerfile command is used
      ##
      command: ["run-kinesis", "consumer"]
      ## Attaches a service account it to the application (Optional)
      ## Default: uses the default service account in the namespace
      ##
      restartPolicy: Never
      ## Environment variables set from provided key:value pair (Optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## Default: None
      ##
      env:
        AWS_DEFAULT_REGION: example-cronjob-consumer
        OVERRIDDEN_VALUE: example-cronjob-consumer
      ## Environment variables set from sealed secrets (Optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## A sealed secret is created for each envSealedSecrets.<value>
      ## Default: None
      ##
      envSealedSecrets:
        overridden-secret:
          OVERRIDDEN_VALUE: example-cronjob-consumer
        database-url:
          DATABASE_URL: example-cronjob-consumer
