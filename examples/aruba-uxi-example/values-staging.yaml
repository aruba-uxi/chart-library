aruba-uxi:
  sealedSecrets:
    imagePullSecret: sealed_version_of_the_base64_encoded_dockerconfigjson
    secretMount:
      firebase-service-account:
        firebase-service-account.json:
          sealed_version_of_the_base64_encoded_service_account_json
    env:
      aws-access:
        AWS_REGION: sealed_version_of_the_base64_encoded_aws_region
        AWS_ACCESS_ID: sealed_version_of_the_base64_encoded_aws_access_id
      database-url:
        DATABASE_URL: sealed_version_of_the_base64_encoded_database_url
  global:
    environment: STAGING
    image:
      repository: nginx
      tag: latest
      pullPolicy: Always
    env:
      DEBUG: false
    envFields:
      HOST_IP: status.hostIP
    labels:
      global-label: global-label
  applications:
    example-service:
      role: webapp
      revisionHistoryLimit: 4
      replicaCount: 2
      image:
        tag: 1.0.1
      serviceAccount:
        create: true
      port: 8000
      # livenessProbe:
      #   path: /livez
      # readinessProbe:
      #   path: /readyz
      resources:
        limits:
          cpu: 100m
          memory: 256Mi
      configMap:
        annotations: {}
        readOnly: false
        path: /app/config
        data:
          config.json: |
            {
              foo: bar
              bing: bang
              server: {
                host: hostname
              }
            }
      secretMount:
      - name: firebase-service-account
        readOnly: true
        path: /app/resources
      env:
        AWS_DEFAULT_REGION: us-west-1
      envSealedSecrets:
        database-url:
          - DATABASE_URL
        aws-access:
          - AWS_REGION
          - AWS_ACCESS_ID
      datadog:
        enabled: false
        traceEnabled: false
      sentry:
        enabled: false
        dsn: sealed_version_of_the_base64_encoded_example_service_sentry_dsn
      labels:
        example-service-staging: example-service-staging
      ingress:
        enabled: true
        hosts:
        - host: example-service.local
          paths:
            - path: /
    example-worker:
      role: worker
      command: ["echo", "foo bar biz"]
      datadog:
        enabled: false
  cronjobs:
    example-cronjob-producer:
      schedule: "*/10 * * * *"
      suspend: true
      command: ["run-kinesis", "producer"]
      serviceAccount:
        create: true
      datadog:
        enabled: false
      sentry:
        enabled: false
        dsn: sealed_version_of_the_base64_encoded_example_cronjob_producer_sentry_dsn
    example-cronjob-consumer:
      schedule: "*/5 * * * *"
      suspend: true
      command: ["run-kinesis", "consumer"]
      restartPolicy: Never
      env:
        AWS_ACCESS_ID: uid-12345
      envSealedSecrets:
        aws-access:
          - AWS_REGION
      labels:
        example-cronjob-consumer-staging: example-cronjob-consumer-staging
