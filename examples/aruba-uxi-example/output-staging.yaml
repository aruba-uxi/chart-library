---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/application-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: example-service
  labels:
    app.kubernetes.io/name: example-service
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.0.1
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
    example-service-staging: example-service-staging
    global-label: global-label
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/cronjob-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: example-cronjob-producer
  labels:
    app.kubernetes.io/name: example-cronjob-producer
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.0.1
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
    global-label: global-label
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/application-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-service
  labels:
    app.kubernetes.io/name: example-service
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.0.1
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
    example-service-staging: example-service-staging
    global-label: global-label
data:
    config.json: |
      {
        foo: bar
        bing: bang
        server: {
          host: hostname
        }
      }
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/application-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-service
  labels:
    app.kubernetes.io/name: example-service
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.0.1
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
    example-service-staging: example-service-staging
    global-label: global-label
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8000
  selector:
    app.kubernetes.io/name: example-service
    app.kubernetes.io/instance: aruba-uxi-example
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-service
  labels:
    app.kubernetes.io/name: example-service
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.0.1
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
    example-service-staging: example-service-staging
    global-label: global-label
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: example-service
      app.kubernetes.io/instance: aruba-uxi-example
  revisionHistoryLimit: 4
  template:
    metadata:
      labels:
        app.kubernetes.io/name: example-service
        app.kubernetes.io/instance: aruba-uxi-example
        helm.sh/chart: aruba-uxi-2.0.1
        app.kubernetes.io/managed-by: Helm
        repository: aruba-uxi-example
        namespace: default
        example-service-staging: example-service-staging
        global-label: global-label
    spec:
      imagePullSecrets:
      - name: sealed-image-pull-secret
      serviceAccountName: example-service
      containers:
      - name: webapp
        image: quay.io/uxi/aruba-uxi-example:1.0.1-dev
        imagePullPolicy: Always
        env:
        - name: ENVIRONMENT
          value: "staging"
        - name: DD_ENABLED
          value: "true"
        - name: DD_ENV
          value: "staging"
        - name: DD_SERVICE
          value: "example-service"
        - name: DD_TRACE_ENABLED
          value: "true"
        - name: DD_AGENT_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: DD_ENTITY_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: SENTRY_ENABLED
          value: "true"
        - name: SENTRY_ENVIRONMENT
          value: "staging"
        - name: SENTRY_DSN
          valueFrom:
          secretKeyRef:
            name: sentry-dsn
            key: SENTRY_DSN        
        - name: AWS_DEFAULT_REGION
          value: "us-west-1"
        - name: DEBUG
          value: "false"        
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP        
        - name: AWS_REGION
          valueFrom:
            secretKeyRef:
              name: aws-access
              key: AWS_REGION
        - name: AWS_ACCESS_ID
          valueFrom:
            secretKeyRef:
              name: aws-access
              key: AWS_ACCESS_ID
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-url
              key: DATABASE_URL
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        readinessProbe:
          httpGet:
            httpHeaders:
            - name: Host
              value: readinessProbe
            - name: Content-Type
              value: application/json
            path: /readyz
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            httpHeaders:
            - name: Host
              value: livenessProbe
            - name: Content-Type
              value: application/json
            path: /livez
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        resources:
            limits:
              cpu: 100m
              memory: 256Mi
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: example-service
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-worker
  labels:
    app.kubernetes.io/name: example-worker
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.0.1
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
    global-label: global-label
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: example-worker
      app.kubernetes.io/instance: aruba-uxi-example
  revisionHistoryLimit: 3
  template:
    metadata:
      labels:
        app.kubernetes.io/name: example-worker
        app.kubernetes.io/instance: aruba-uxi-example
        helm.sh/chart: aruba-uxi-2.0.1
        app.kubernetes.io/managed-by: Helm
        repository: aruba-uxi-example
        namespace: default
        global-label: global-label
    spec:
      imagePullSecrets:
      - name: sealed-image-pull-secret
      containers:
      - name: worker
        image: quay.io/uxi/aruba-uxi-example:1.0.0
        imagePullPolicy: Always
        command: ["echo","foo bar biz"]
        env:
        - name: ENVIRONMENT
          value: "staging"
        - name: DD_ENABLED
          value: "true"
        - name: DD_ENV
          value: "staging"
        - name: DD_SERVICE
          value: "example-worker"
        - name: DD_TRACE_ENABLED
          value: "false"
        - name: DD_AGENT_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: DD_ENTITY_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: SENTRY_ENABLED
          value: "false"        
        - name: DEBUG
          value: "false"        
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: example-cronjob-consumer
  labels:
    app.kubernetes.io/name: example-cronjob-consumer
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.0.1
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
    example-cronjob-consumer-staging: example-cronjob-consumer-staging
    global-label: global-label
spec:
  schedule: "*/5 * * * *"
  suspend: "false"
  jobTemplate:
    spec:
      template:
        spec:
          imagePullSecrets:
          - name: sealed-image-pull-secret
          containers:
          - name: example-cronjob-consumer
            image: quay.io/uxi/aruba-uxi-example:1.0.0
            imagePullPolicy: Always
            env:
            - name: ENVIRONMENT
              value: "staging"
            - name: DD_ENABLED
              value: "false"
            - name: SENTRY_ENABLED
              value: "false"            
            - name: AWS_ACCESS_ID
              value: "uid-12345"
            - name: DEBUG
              value: "false"            
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP            
            - name: AWS_REGION
              valueFrom:
                secretKeyRef:
                  name: aws-access
                  key: AWS_REGION
            command: ["run-kinesis","consumer"]
          restartPolicy: Never
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: example-cronjob-producer
  labels:
    app.kubernetes.io/name: example-cronjob-producer
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.0.1
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
    global-label: global-label
spec:
  schedule: "*/10 * * * *"
  suspend: "true"
  jobTemplate:
    spec:
      template:
        spec:
          imagePullSecrets:
          - name: sealed-image-pull-secret
          serviceAccountName: example-cronjob-producer
          containers:
          - name: example-cronjob-producer
            image: quay.io/uxi/aruba-uxi-example:1.0.0
            imagePullPolicy: Always
            env:
            - name: ENVIRONMENT
              value: "staging"
            - name: DD_ENABLED
              value: "true"
            - name: DD_ENV
              value: "staging"
            - name: DD_SERVICE
              value: "example-cronjob-producer"
            - name: DD_TRACE_ENABLED
              value: "false"
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: DD_ENTITY_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: SENTRY_ENABLED
              value: "true"
            - name: SENTRY_ENVIRONMENT
              value: "staging"
            - name: SENTRY_DSN
              valueFrom:
              secretKeyRef:
                name: sentry-dsn
                key: SENTRY_DSN            
            - name: DEBUG
              value: "false"            
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP            
            command: ["run-kinesis","producer"]
          restartPolicy: OnFailure
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/imagepullsecret.yaml
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: sealed-image-pull-secret
  labels:
    app.kubernetes.io/name: sealed-image-pull-secret
    helm.sh/chart: aruba-uxi-2.0.1
    app.kubernetes.io/managed-by: Helm
    namespace: default
spec:
  encryptedData:
    .dockerconfigjson: sealed_version_of_the_base64_encoded_dockerconfigjson
  template:
    data: null
    metadata:
      name: sealed-image-pull-secret
      labels:
      app.kubernetes.io/name: sealed-image-pull-secret
      helm.sh/chart: aruba-uxi-2.0.1
      app.kubernetes.io/managed-by: Helm
      namespace: default
    type: kubernetes.io/dockerconfigjson
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/sealedsecret.yaml
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: aws-access
  labels:
    app.kubernetes.io/name: aws-access
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.0.1
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
spec:
  encryptedData:
    AWS_ACCESS_ID: sealed_version_of_the_base64_encoded_aws_access_id
    AWS_REGION: sealed_version_of_the_base64_encoded_aws_region
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/sealedsecret.yaml
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: database-url
  labels:
    app.kubernetes.io/name: database-url
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.0.1
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
spec:
  encryptedData:
    DATABASE_URL: sealed_version_of_the_base64_encoded_database_url
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/sentry-dsn.yaml
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: sentry-dsn
  labels:
    app.kubernetes.io/name: sentry-dsn
    helm.sh/chart: aruba-uxi-2.0.1
    app.kubernetes.io/managed-by: Helm
    namespace: default
spec:
  encryptedData:
    SENTRY_DSN: sealed_version_of_the_base64_encoded_sentry_dsn
