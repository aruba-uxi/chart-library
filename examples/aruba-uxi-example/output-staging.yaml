---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/application-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: example-service
  labels:
    app.kubernetes.io/name: example-service
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.3.2
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
    example-service-staging: example-service-staging
    global-label: global-label
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/cronjob-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: example-cronjob-producer
  labels:
    app.kubernetes.io/name: example-cronjob-producer
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.3.2
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
    global-label: global-label
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/application-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-service
  labels:
    app.kubernetes.io/name: example-service
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.3.2
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
    example-service-staging: example-service-staging
    global-label: global-label
data:
    config.json: |
      {
        foo: bar
        bing: bang
        server: {
          host: hostname
        }
      }
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/application-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-service
  labels:
    app.kubernetes.io/name: example-service
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.3.2
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
    example-service-staging: example-service-staging
    global-label: global-label
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8000
  selector:
    app.kubernetes.io/name: example-service
    app.kubernetes.io/instance: aruba-uxi-example
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-service
  labels:
    app.kubernetes.io/name: example-service
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.3.2
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
    example-service-staging: example-service-staging
    global-label: global-label
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: example-service
      app.kubernetes.io/instance: aruba-uxi-example
  revisionHistoryLimit: 4
  template:
    metadata:
      labels:
        app.kubernetes.io/name: example-service
        app.kubernetes.io/instance: aruba-uxi-example
        helm.sh/chart: aruba-uxi-2.3.2
        app.kubernetes.io/managed-by: Helm
        repository: aruba-uxi-example
        namespace: default
        example-service-staging: example-service-staging
        global-label: global-label
    spec:
      imagePullSecrets:
      - name: sealed-image-pull-secret
      serviceAccountName: example-service
      containers:
      - name: webapp
        image: quay.io/uxi/aruba-uxi-example:1.0.1
        imagePullPolicy: Always
        env:
        - name: ENVIRONMENT
          value: "staging"
        - name: DD_ENABLED
          value: "true"
        - name: DD_ENV
          value: "staging"
        - name: DD_SERVICE
          value: "example-service"
        - name: DD_TRACE_ENABLED
          value: "true"
        - name: DD_AGENT_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: DD_ENTITY_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: SENTRY_ENVIRONMENT
          value: "staging"
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: example-service-sentry-dsn
              key: SENTRY_DSN        
        - name: AWS_DEFAULT_REGION
          value: "us-west-1"
        - name: DEBUG
          value: "false"        
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP        
        - name: AWS_REGION
          valueFrom:
            secretKeyRef:
              name: aws-access
              key: AWS_REGION
        - name: AWS_ACCESS_ID
          valueFrom:
            secretKeyRef:
              name: aws-access
              key: AWS_ACCESS_ID
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-url
              key: DATABASE_URL
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        readinessProbe:
          httpGet:
            httpHeaders:
            - name: Host
              value: readinessProbe
            - name: Content-Type
              value: application/json
            path: /readyz
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            httpHeaders:
            - name: Host
              value: livenessProbe
            - name: Content-Type
              value: application/json
            path: /livez
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        resources:
            limits:
              cpu: 100m
              memory: 256Mi
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: firebase-service-account
          mountPath: /app/resources
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: example-service
      - name: firebase-service-account
        secret:
          secretName: firebase-service-account
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-worker
  labels:
    app.kubernetes.io/name: example-worker
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.3.2
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
    global-label: global-label
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: example-worker
      app.kubernetes.io/instance: aruba-uxi-example
  revisionHistoryLimit: 3
  template:
    metadata:
      labels:
        app.kubernetes.io/name: example-worker
        app.kubernetes.io/instance: aruba-uxi-example
        helm.sh/chart: aruba-uxi-2.3.2
        app.kubernetes.io/managed-by: Helm
        repository: aruba-uxi-example
        namespace: default
        global-label: global-label
    spec:
      imagePullSecrets:
      - name: sealed-image-pull-secret
      containers:
      - name: worker
        image: quay.io/uxi/aruba-uxi-example:1.0.0
        imagePullPolicy: Always
        command: ["echo","foo bar biz"]
        env:
        - name: ENVIRONMENT
          value: "staging"
        - name: DD_ENABLED
          value: "true"
        - name: DD_ENV
          value: "staging"
        - name: DD_SERVICE
          value: "example-worker"
        - name: DD_TRACE_ENABLED
          value: "false"
        - name: DD_AGENT_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: DD_ENTITY_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid        
        - name: DEBUG
          value: "false"        
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/cronjob.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: example-cronjob-consumer
  labels:
    app.kubernetes.io/name: example-cronjob-consumer
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.3.2
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
    example-cronjob-consumer-staging: example-cronjob-consumer-staging
    global-label: global-label
spec:
  schedule: "*/5 * * * *"
  suspend: false
  jobTemplate:
    spec:
      template:
        spec:
          imagePullSecrets:
          - name: sealed-image-pull-secret
          containers:
          - name: example-cronjob-consumer
            image: quay.io/uxi/aruba-uxi-example:1.0.0
            imagePullPolicy: Always
            env:
            - name: ENVIRONMENT
              value: "staging"
            - name: DD_ENABLED
              value: "false"            
            - name: AWS_ACCESS_ID
              value: "uid-12345"
            - name: DEBUG
              value: "false"            
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP            
            - name: AWS_REGION
              valueFrom:
                secretKeyRef:
                  name: aws-access
                  key: AWS_REGION
            command: ["run-kinesis","consumer"]
          restartPolicy: Never
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/cronjob.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: example-cronjob-producer
  labels:
    app.kubernetes.io/name: example-cronjob-producer
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.3.2
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
    global-label: global-label
spec:
  schedule: "*/10 * * * *"
  suspend: true
  jobTemplate:
    spec:
      template:
        spec:
          imagePullSecrets:
          - name: sealed-image-pull-secret
          serviceAccountName: example-cronjob-producer
          containers:
          - name: example-cronjob-producer
            image: quay.io/uxi/aruba-uxi-example:1.0.0
            imagePullPolicy: Always
            env:
            - name: ENVIRONMENT
              value: "staging"
            - name: DD_ENABLED
              value: "true"
            - name: DD_ENV
              value: "staging"
            - name: DD_SERVICE
              value: "example-cronjob-producer"
            - name: DD_TRACE_ENABLED
              value: "false"
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: DD_ENTITY_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: SENTRY_ENVIRONMENT
              value: "staging"
            - name: SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  name: example-cronjob-producer-sentry-dsn
                  key: SENTRY_DSN            
            - name: DEBUG
              value: "false"            
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP            
            command: ["run-kinesis","producer"]
          restartPolicy: OnFailure
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/application-ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: example-service
  labels:
    app.kubernetes.io/name: example-service
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.3.2
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
    example-service-staging: example-service-staging
    global-label: global-label
  annotations:
    kubernetes.io/ingress.class: kong
spec:
  rules:
  - host: example-service.local
    http:
      paths:
      - path: /
        pathType: ImplementationSpecific
        backend:
          serviceName: example-service
          servicePort: 80
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/application-sentry-dsn.yaml
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: example-service-sentry-dsn
  labels:
    app.kubernetes.io/name: example-service
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.3.2
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
    example-service-staging: example-service-staging
    global-label: global-label
spec:
  encryptedData:
    SENTRY_DSN: sealed_version_of_the_base64_encoded_example_service_sentry_dsn
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/cronjob-sentry-dsn.yaml
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: example-cronjob-producer-sentry-dsn
  labels:
    app.kubernetes.io/name: example-cronjob-producer
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.3.2
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
    global-label: global-label
spec:
  encryptedData:
    SENTRY_DSN: sealed_version_of_the_base64_encoded_example_cronjob_producer_sentry_dsn
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/imagepullsecret.yaml
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: sealed-image-pull-secret
  labels:
    app.kubernetes.io/name: sealed-image-pull-secret
    helm.sh/chart: aruba-uxi-2.3.2
    app.kubernetes.io/managed-by: Helm
    namespace: default
spec:
  encryptedData:
    .dockerconfigjson: sealed_version_of_the_base64_encoded_dockerconfigjson
  template:
    data: null
    metadata:
      name: sealed-image-pull-secret
      labels:
      app.kubernetes.io/name: sealed-image-pull-secret
      helm.sh/chart: aruba-uxi-2.3.2
      app.kubernetes.io/managed-by: Helm
      namespace: default
    type: kubernetes.io/dockerconfigjson
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/sealedsecret.yaml
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: aws-access
  labels:
    app.kubernetes.io/name: aws-access
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.3.2
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
spec:
  encryptedData:
    AWS_ACCESS_ID: sealed_version_of_the_base64_encoded_aws_access_id
    AWS_REGION: sealed_version_of_the_base64_encoded_aws_region
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/sealedsecret.yaml
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: database-url
  labels:
    app.kubernetes.io/name: database-url
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.3.2
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
spec:
  encryptedData:
    DATABASE_URL: sealed_version_of_the_base64_encoded_database_url
---
# Source: aruba-uxi-example/charts/aruba-uxi/templates/sealedsecret.yaml
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: firebase-service-account
  labels:
    app.kubernetes.io/name: firebase-service-account
    app.kubernetes.io/instance: aruba-uxi-example
    helm.sh/chart: aruba-uxi-2.3.2
    app.kubernetes.io/managed-by: Helm
    repository: aruba-uxi-example
    namespace: default
spec:
  encryptedData:
    SERVICE_ACCOUNT.json: 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
