aruba-uxi:
  ## Sealed secret data used to create the sealed secrets used by applications and cronjobs
  ##
  sealedSecrets:
    ## Creates a sealed image pull secret using the data provided (Optional)
    ## Used by deployments to pull images from our image repository
    ## Default: None
    ##
    imagePullSecret: sealed_version_of_the_base64_encoded_dockerconfigjson
    ## Creates a sealed secret for the sentry DSN (Optional).
    ## Used when sentry is enabled
    ## Default: None
    ##
    sentryDsn: sealed_version_of_the_base64_encoded_sentry_dsn
    ## Creates sealed secrets used to populate environment variables (Optional)
    ## A sealed secret is created for each env.<value>
    ## Default: None
    ##
    env:
      secret-name-a:
        FOO: sealed_version_of_the_base64_encoded_environment_variable_value
        BAR: sealed_version_of_the_base64_encoded_environment_variable_value
      secret-name-b:
        BIZ: sealed_version_of_the_base64_encoded_environment_variable_value
  ## Global values used by all manifests
  ##
  global:
    ## The repository that this chart is kept in
    ## This can be define in the base values.yaml file and forgotten about
    ##
    repository: aruba-uxi-example
    ## The environment that the service is deployed in
    ## Valid values are: DEV|STAGING|PRODUCTION (case insensitive)
    ## The values are converted to lowercase when used in the charts
    ##
    environment: DEV
    ## Configures the image repository and pull policy for all pods
    ## The "image.tag" and "image.repository" needs to be define in the values.yaml file too
    ##
    image:
      repository: aruba-uxi-example
      tag: 1.2.3
      pullPolicy: IfNotPresent
    ## Basic environment variables (Optional)
    ## If overridden, in application or cronjobs, precedence is given to the overridden values
    ## Default: None
    ##
    env:
      OVERRIDDEN_VALUE: global-value
    ## Environment variables set from the deployment fields (Optional)
    ## If overridden, in application or cronjobs, precedence is given to the overridden values
    ## Default: None
    ##
    envFields:
      HOST_IP: global-value
      OVERRIDDEN_FIELD_VALUE: global-value
    ## Ability to add extra labels above the default ones add by the `aruba-uxi.labels` template (Optional)
    ## Default: Nones
    ##
    labels: {}
  ## Creates one or more applications unique by role.
  ## Applications are defined as keys in the applications map
  ## The key is used as the name of the application and subsequent objects created
  ##
  applications:
    example-service:
      ## The application role
      ## The difference between a webapp and worker is the worker does not have ports exposed.
      ## I.e a worker does not get a Service manifest defined
      ## Valid roles: webapp | worker
      ##
      role: webapp
      ## Sets the replica count (Optional)
      ## Default: 1
      ##
      revisionHistoryLimit: 3
      ## Sets number of old ReplicaSets for this deployment to be retained (Optional)
      ## Default: 3
      ##
      replicaCount: 1
      ## Configures the image and image pull policy (Optional)
      ## Default: uses .global.image
      ##
      image: {}
        # repository: nginx
        # pullPolicy: IfNotPresent
        # tag: ""
      ## Attaches a service account it to the application (Optional)
      ## Default: uses the default service account in the namespace
      ##
      serviceAccount:
        create: true
        # name: service-account-name
        # annotations: {}
      ## Overrides the command from the dockerfile (Optional)
      ## Default: the Dockerfile command is used
      ##
      command: []
      ## Which port on the pod is exposed.
      ## NB! for 'role: worker' do not set this
      ##
      port: 8000
      ## Configures the service created (Optional)
      ## Default: ClusterIP on port 80
      ##
      service: {}
        # type: ClusterIP
        # port: 80
      ## Enables the liveness probe on the specified path (Optional)
      ## NB! for 'role:worker' this should be excluded
      ##
      livenessProbe:
        path: /livez
      ## Enables the readiness probe on the specified path (Optional)
      ## NB! for 'role:worker' this should be excluded
      ##
      readinessProbe:
        path: /readyz
      ## Configure the pod resources (Optional)
      ## Default: lets kubernetes set the resources
      ##
      resources: {}
        # limits:
        #   cpu: 100m
        #   memory: 256Mi
        # requests:
        #   cpu: 100m
        #   memory: 128Mi
      ## Configures the node selectors for the pods (Optional)
      ## Default: None
      ##
      nodeSelector: {}
      ## Configures the tolerations for the pods (Optional)
      ## Default: None
      ##
      tolerations: []
      ## Configures the pod affinity for the pods (Optional)
      ## Default: None
      ##
      affinity: {}
      ## Configures the security context for the pods (Optional)
      ## Default: None
      ##
      securityContext: {}
        # runAsUser: 1000
        # runAsGroup: 3000
        # fsGroup: 2000
      ## Adds a config map to the application (Optional)
      ## Default: None
      ###
      configMap:
        annotations: {}
        readOnly: false
        path: /app/config
        data:
          config.json: |
            {
              foo: bar
              bing: bang
              server: {
                host: hostname
              }
            }
      ## Environment variables set from provided key:value pair (Optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## Default: None
      ##
      env:
        AWS_DEFAULT_REGION: example-service
        OVERRIDDEN_VALUE: example-service
      ## Environment variables set from the deployment fields (Optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## Default: None
      ##
      envFields:
        HOST_IP: example-service
        OVERRIDDEN_FIELD_VALUE: example-service
      ## Environment variables set from sealed secrets (Optional)
      ## The sealed secret and environment variable must be defined in .sealedSecrets.env
      ## Default: None
      ##
      envSealedSecrets:
        secret-name-a:
          - FOO
          - BAR
        secret-name-b:
          - BIZ
      ## Enables datadog metrics (Optional)
      ## DD_ENABLED environment variable is always set.
      ## The value is taken from ".datadog.enabled" (default: false)
      ## Setting ".datadog.enabled: true" will add the necessary environment variables:
      ## - DD_ENV: value from ".global.environment"
      ## - DD_SERVICE: the name of the application or cronjob
      ## - DD_AGENT_HOST: value from ".datadog.agentHost" (default: status.hostIP)
      ## - DD_ENTITY_ID: value from ".datadog.entityId" (default: metadata.uid )
      ## - DD_TRACE_ENABLED: ".datadog.traceEnabled" (default: false)
      ##
      datadog:
        enabled: false
        traceEnabled: false
      ## Enables sentry (Optional)
      ## SENTRY_ENABLED environment variable is always set.
      ## The value is taken from ".sentry.enabled" (default: false)
      ## Setting ".sentry.enabled: true" will add the necessary environment variables:
      ## - SENTRY_ENVIRONMENT: value from ".global.environment"
      ## - SENTRY_DSN: value taken from the sentry-dsn sealed secret. You need to add the.sealedSecrets.sentryDsn value
      ##
      sentry:
        enabled: false
      ## Ability to add extra labels above the default ones add by the `aruba-uxi.labels` template (Optional)
      ## Default: None
      ##
      labels: {}
      ## Configures a legacy ingress on the application (Optional)
      ## Default: None
      ingress:
        enabled: false
        hosts:
        - host: example-service.local
          paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              serviceName: example-service
              servicePort: 8000
        tls: []
        # - secretName: chart-example-tls
        #   hosts:
        #     - example-service.local
    example-worker:
      ## The application role
      ## The difference between a webapp and worker is the worker does not have ports exposed.
      ## I.e a worker does not get a Service manifest defined
      ## Valid roles: webapp | worker
      ##
      role: worker
      ## Sets the replica count (Optional)
      ## Default: 1
      ##
      revisionHistoryLimit: 3
      ## Sets number of old ReplicaSets for this deployment to be retained (Optional)
      ## Default: 3
      ##
      replicaCount: 1
      ## Configures the image and image pull policy (Optional)
      ## Default: uses .global.image
      ##
      image: {}
        # repository: nginx
        # pullPolicy: IfNotPresent
        # tag: ""
      ## Attaches a service account it to the application (Optional)
      ## Default: uses the default service account in the namespace
      ##
      serviceAccount:
        # create: false
        name: example-worker-external-service-account
        # annotations: {}
      ## Overrides the command from the dockerfile (Optional)
      ## Default: the Dockerfile command is used
      ##
      command: ["echo", "foo bar biz"]
      ## Which port on the pod is exposed.
      ## NB! for 'role: worker' do not set this
      ##
      port: 8000
      ## Configures the service created (Optional)
      ## Default: ClusterIP on port 80
      ##
      service: {}
        # type: ClusterIP
        # port: 80
      ## Enables the liveness probe on the specified path (Optional)
      ## NB! for 'role:worker' this should be excluded
      ##
      livenessProbe:
        path: /livez
      ## Enables the readiness probe on the specified path (Optional)
      ## NB! for 'role:worker' this should be excluded
      ##
      readinessProbe:
        path: /readyz
      ## Configure the pod resources (Optional)
      ## Default: lets kubernetes set the resources
      ##
      resources: {}
        # limits:
        #   cpu: 100m
        #   memory: 256Mi
        # requests:
        #   cpu: 100m
        #   memory: 128Mi
      ## Configures the node selectors for the pods (Optional)
      ## Default: None
      ##
      nodeSelector: {}
      ## Configures the tolerations for the pods (Optional)
      ## Default: None
      ##
      tolerations: []
      ## Configures the pod affinity for the pods (Optional)
      ## Default: None
      ##
      affinity: {}
      ## Configures the security context for the pods (Optional)
      ## Default: None
      ##
      securityContext: {}
        # runAsUser: 1000
        # runAsGroup: 3000
        # fsGroup: 2000
       ## Adds a config map to the application (Optional)
      ## Default: None
      ###
      configMap:
        annotations: {}
        readOnly: false
        path: /app/config
        data:
          config.json: |
            "hello worker"
      ## Environment variables set from provided key:value pair (Optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## Default: None
      ##
      env:
        AWS_DEFAULT_REGION: example-worker
        OVERRIDDEN_VALUE: example-worker
      ## Environment variables set from the deployment fields (Optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## Default: None
      ##
      envFields:
        HOST_IP: example-worker
        OVERRIDDEN_FIELD_VALUE: example-worker
      ## Environment variables set from sealed secrets (Optional)
      ## The sealed secret and environment variable must be defined in .sealedSecrets.env
      ## Default: None
      ##
      envSealedSecrets:
        secret-name-a:
          - FOO
          - BAR
        secret-name-b:
          - BIZ
      ## Enables datadog metrics (Optional)
      ## DD_ENABLED environment variable is always set.
      ## The value is taken from ".datadog.enabled" (default: false)
      ## Setting ".datadog.enabled: true" will add the necessary environment variables:
      ## - DD_ENV: value from ".global.environment"
      ## - DD_SERVICE: the name of the application or cronjob
      ## - DD_AGENT_HOST: value from ".datadog.agentHost" (default: status.hostIP)
      ## - DD_ENTITY_ID: value from ".datadog.entityId" (default: metadata.uid )
      ## - DD_TRACE_ENABLED: ".datadog.traceEnabled" (default: false)
      ##
      datadog:
        enabled: false
        traceEnabled: false
      ## Enables sentry (Optional)
      ## SENTRY_ENABLED environment variable is always set.
      ## The value is taken from ".sentry.enabled" (default: false)
      ## Setting ".sentry.enabled: true" will add the necessary environment variables:
      ## - SENTRY_ENVIRONMENT: value from ".global.environment"
      ## - SENTRY_DSN: value taken from the sentry-dsn sealed secret. You need to add the.sealedSecrets.sentryDsn value
      ##
      sentry:
        enabled: false
      ## Ability to add extra labels above the default ones add by the `aruba-uxi.labels` template (Optional)
      ## Default: None
      ##
      labels: {}
  ## Creates one or more cronjobs.
  ## Cronjobs are defined as keys in the applications map
  ## The key is used as the name of the cronjob and subsequent objects created
  ##
  cronjobs:
    example-cronjob-producer:
      ## The schedule for the cronjob
      ##
      schedule: "*/10 * * * *"
      ## Suspends the cronjob (Optional)
      ## Default: false
      ##
      suspend: false
      ## Configures the image and image pull policy (Optional)
      ## Default: uses .global.image
      ##
      image: {}
      ## Overrides the command from the dockerfile (Optional)
      ## Default: the Dockerfile command is used
      ##
      command: ["run-kinesis", "producer"]
      ## Attaches a service account it to the application (Optional)
      ## Default: uses the default service account in the namespace
      ##
      serviceAccount:
        create: true
        name: example-cronjob-producer-service-account
        # annotations: {}
      ## Whether the cronjob should restart if a job fails (Optional)
      ## Default: OnFailure
      ##
      restartPolicy: OnFailure
      ## Environment variables set from provided key:value pair (Optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## Default: None
      ##
      env:
        AWS_DEFAULT_REGION: example-cronjob-producer
        OVERRIDDEN_VALUE: example-cronjob-producer
      ## Environment variables set from the deployment fields (Optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## Default: None
      ##
      envFields:
        HOST_IP: example-cronjob-producer
        OVERRIDDEN_FIELD_VALUE: example-cronjob-producer
      ## Environment variables set from sealed secrets (Optional)
      ## The sealed secret and environment variable must be defined in .sealedSecrets.env
      ## Default: None
      ##
      envSealedSecrets:
        secret-name-a:
          - FOO
          - BAR
        secret-name-b:
          - BIZ
      ## Enables datadog metrics (Optional)
      ## DD_ENABLED environment variable is always set.
      ## The value is taken from ".datadog.enabled" (default: false)
      ## Setting ".datadog.enabled: true" will add the necessary environment variables:
      ## - DD_ENV: value from ".global.environment"
      ## - DD_SERVICE: the name of the application or cronjob
      ## - DD_AGENT_HOST: value from ".datadog.agentHost" (default: status.hostIP)
      ## - DD_ENTITY_ID: value from ".datadog.entityId" (default: metadata.uid )
      ## - DD_TRACE_ENABLED: ".datadog.traceEnabled" (default: false)
      ##
      datadog:
        enabled: false
        traceEnabled: false
      ## Enables sentry (Optional)
      ## SENTRY_ENABLED environment variable is always set.
      ## The value is taken from ".sentry.enabled" (default: false)
      ## Setting ".sentry.enabled: true" will add the necessary environment variables:
      ## - SENTRY_ENVIRONMENT: value from ".global.environment"
      ## - SENTRY_DSN: value taken from the sentry-dsn sealed secret. You need to add the.sealedSecrets.sentryDsn value
      ##
      sentry:
        enabled: false
      ## Ability to add extra labels above the default ones add by the `aruba-uxi.labels` template (Optional)
      ## Default: None
      ##
      labels: {}
    example-cronjob-consumer:
      ## The schedule for the cronjob
      ##
      schedule: "*/5 * * * *"
      ## Suspends the cronjob (Optional)
      ## Default: false
      ##
      suspend: false
      ## Overrides the command from the dockerfile (Optional)
      ## Default: the Dockerfile command is used
      ##
      command: ["run-kinesis", "consumer"]
      ## Attaches a service account it to the application (Optional)
      ## Default: uses the default service account in the namespace
      ##
      serviceAccount:
        create: false
        name: example-cronjob-consumer-service-account
      ## Whether the cronjob should restart if a job fails (Optional)
      ## Default: OnFailure
      ##
      restartPolicy: OnFailure
      ## Environment variables set from provided key:value pair (Optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## Default: None
      ##
      env:
        AWS_DEFAULT_REGION: example-cronjob-consumer
        OVERRIDDEN_VALUE: example-cronjob-consumer
      ## Environment variables set from the deployment fields (Optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## Default: None
      ##
      envFields:
        HOST_IP: example-cronjob-consumer
        OVERRIDDEN_FIELD_VALUE: example-cronjob-consumer
      ## Environment variables set from sealed secrets (Optional)
      ## The sealed secret and environment variable must be defined in .sealedSecrets.env
      ## Default: None
      ##
      envSealedSecrets:
        secret-name-a:
          - FOO
          - BAR
        secret-name-b:
          - BIZ
      ## Enables datadog metrics (Optional)
      ## DD_ENABLED environment variable is always set.
      ## The value is taken from ".datadog.enabled" (default: false)
      ## Setting ".datadog.enabled: true" will add the necessary environment variables:
      ## - DD_ENV: value from ".global.environment"
      ## - DD_SERVICE: the name of the application or cronjob
      ## - DD_AGENT_HOST: value from ".datadog.agentHost" (default: status.hostIP)
      ## - DD_ENTITY_ID: value from ".datadog.entityId" (default: metadata.uid )
      ## - DD_TRACE_ENABLED: ".datadog.traceEnabled" (default: false)
      ##
      datadog:
        enabled: false
        traceEnabled: false
      ## Enables sentry (Optional)
      ## SENTRY_ENABLED environment variable is always set.
      ## The value is taken from ".sentry.enabled" (default: false)
      ## Setting ".sentry.enabled: true" will add the necessary environment variables:
      ## - SENTRY_ENVIRONMENT: value from ".global.environment"
      ## - SENTRY_DSN: value taken from the sentry-dsn sealed secret. You need to add the.sealedSecrets.sentryDsn value
      ##
      sentry:
        enabled: false
      ## Ability to add extra labels above the default ones add by the `aruba-uxi.labels` template (Optional)
      ## Default: None
      ##
      labels: {}
