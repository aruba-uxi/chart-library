aruba-uxi:
  sealedSecrets:
    ## Creates a sealed image pull secret using the data provided
    ## Used by deployments to pull images from our image repository (optional, default: null)
    imagePullSecret: sealed_version_of_the_base64_encoded_dockerconfigjson
    ## Creates sealed secrets used to populate environment variables
    ## A sealed secret is created for each env.<value> (optional, default: null)
    env:
      secret-name-a:
        FOO: sealed_version_of_the_base64_encoded_environment_variable_value
        BAR: sealed_version_of_the_base64_encoded_environment_variable_value
      secret-name-b:
        BIZ: sealed_version_of_the_base64_encoded_environment_variable_value
    ## Creates sealed secrets used to mount as files
    ## A sealed secret is created for each secretMount.<value> (optional, default: null)
    secretMount:
      secret-name:
        filename.json: sealed_version_of_the_base64_encoded_file_contents
  global:
    ## The github repository that these charts are kept in
    ## This can be defined in the base values.yaml file and forgotten about
    repository: aruba-uxi-example
    ## The environment that the service is deployed in. Validation is also done on the values
    ## Valid values are: (DEV, STAGING, PRODUCTION). An error will be raised for invalid values
    ## The values are converted to lowercase when used in the charts
    environment: DEV
    ## Configures the image repository, tag and pull policy for all pods
    ## The "image.tag" and "image.repository" needs to be defined in the values.yaml file too
    image:
      ## The image repository to use for images
      repository: aruba-uxi-example
      ## The image tag to use
      tag: 1.2.3
      ## The image pull policy to use (optional, default: IfNotPresent)
      pullPolicy: IfNotPresent
    ## Basic environment variables (optional, default: {})
    env:
      OVERRIDDEN_VALUE: global-value
    ## Environment variables set from the deployment fields (optional, default: {})
    envFields:
      HOST_IP: global-value
      OVERRIDDEN_FIELD_VALUE: global-value
    ## Ability to add extra labels above the default ones add by the `aruba-uxi.labels` template. (optional, default: null)
    labels: {}

| application.command | The command that the pod must run. Overrides the docker image command | `""` | Yes |
| application.args | The arguments that used by the override command | `""` | Yes |
| application.port | The port that must be exposed on the pod. Also used when adding a service to the webapp. Can be excluded when defining a worker | | No |
| application.service | Configures the service created for webapps | `ClusterIP` | Yes |
| application.service.type | Configures the service type that is created for webapps | `ClusterIP` | Yes |
| application.service.port | Configures the service port to expose | `80` | Yes |
| application.livenessProbe.enabled | Enabled or disabled liveness probe  | | No |
| application.livenessProbe.path | The API path to query for liveness tests | `/livez` | Yes |
| application.livesnessProbe.initialDelaySeconds | Number of seconds after the container starts before sending the first probe | `10` | Yes |
| application.livesnessProbe.periodSeconds | How often to perform the probe | `10` | Yes |
| application.livesnessProbe.timeoutSeconds | The number of seconds after which the probe should timeout | `1` | Yes |
| application.livesnessProbe.failureThreshold | The number of times the probe fails before giving up | `3` | Yes |
| application.readinessProbe.enabled | Enabled or disabled readiness probe  | | No |
| application.readinessProbe.path | The API path to query for readiness tests | `/readyz` | Yes |
| application.readinessProbe.initialDelaySeconds | Number of seconds after the container starts before sending the first probe | `10` | Yes |
| application.readinessProbe.periodSeconds | How often to perform the probe | `10` | Yes |
| application.readinessProbe.timeoutSeconds | The number of seconds after which the probe should timeout | `1` | Yes |
| application.readinessProbe.failureThreshold | The number of times the probe fails before giving up | `3` | Yes |
| application.resources | Resource limits and requests to set on the pod. See [link](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) for more details on the structure | `{}` | Yes |
| application.nodeSelector | Node selector specifications to set on the pod. See [link](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) for more details on the structure | `{}` | Yes |
| application.tolerations | Tolerations to set on the pod. See [link](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) for more details on the structure | `{}` | Yes |
| application.affinity | Affinity to set on the pod. See [link](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity) for more details on the structure | `{}` | Yes |
| application.securityContext | Sets the security contextfor the pods. See [link](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/) for more details on the structure | `{}` | Yes |
| application.configMap | A config map to create and apply to the application | | Yes |
| application.configMap.create | Whether to create the config map | | No |
| application.configMap.name | The name of the config map | | No |
| application.configMap.annotations | Annotations to add to the config map | `{}` | Yes |
| application.configMap.readOnly | Whether the config map is mapped as readonly or not | `true` | Yes |
| application.configMap.path | The path to map the config map to in the pod | `{}` | Yes |
| application.configMap.data | The data to add to the config map | `{}` | Yes |
| application.secretMount | A secret mount to add secrets as a file to the pod | | Yes |
| application.secretMount.name | The name of the secret volume to be mounted | | Yes |
| application.secretMount.path | The path to mount the secret on in the pod | `{}` | Yes |
| application.secretMount.readOnly | Whether the secret is mounted as readonly file or not | `true` | Yes |
| application.env | Basic environment variables specific for this application. Can override the global.env values | `{}` | Yes |
| application.envFields | Environment variables that pull information from kubernetss object fields for this application. Can override the global.envField values | `{}` | Yes |
| application.envSealedSecrets | Environment variables from sealed secrets specific to this application. Can override the global.envSealedSecrets values | `{}` | Yes |
| application.datadog.enabled | Enables datadog metrics. Setting to true will create the necessary environment variables (`DD_ENV`, `DD_SERVICE`, `DD_AGENT_HOST`, `DD_ENTITY_ID`) | `false` | Yes |
| application.datadog.traceEnabled | Enables or disables datadog tracing. Sets the `DD_TRACE_ENABLED` environment variable | `false` | Yes |
| application.datadog.serviceName | Sets the name of `DD_SERVICE` env variable. | `$name` | Yes |
| application.datadog.extraEnvironmentVariables | Adds extra environment variables specific to datadog | | Yes |
| application.sentry.enabled | Enables sentry on the application. Setting to true will create the necessary environment variables. You need to add the `.sentry.dsn` value to create the sentry DSN sealed secret | `false` | Yes |
| application.sentry.dsn | Creates a sealed secret with the sentry DSN from the provided sealed version of the base64 encoded sentry DSN value. The sealed secret name takes the format `<application-name>-sentry-dsn` | | Yes |
| application.sentry.extraEnvironmentVariables | Adds extra environment variables related to sentry | | Yes |
| application.labels | Extra labels to apply to all k8s objects. Includes any extra labels defined in the global object. | `{}` | Yes |
| application.ingress | Configures the legacy ingress added to an application | `{}` | Yes |
| application.ingress.useLegacyApiVersion | Toggles the legacy `extensions/v1beta1` kubernetes `apiVersion` for kubernetes clusters that do not support `networking.k8s.io/v1`. | `false` | Yes |
| application.ingress.className | Defines the ingress class name. | | No |
| application.ingress.hosts | A list of hosts to add to the legacy ingress. | | No |
| application.ingress.hosts[].paths | A list of paths for each legacy ingress hosts | | No |
| application.ingress.hosts[].paths.path | The path | | No |
| application.ingress.hosts[].paths.type | The pathType to use for the respective path. | `ImplementaionSpecific` | Yes |
| application.ingress.hosts[].paths.backend.serviceName | The service name that the path talks to. | `application.name` | Yes |
| application.ingress.hosts[].paths.backend.servicePort | The service port that the path talks to. | `application.port` | Yes |
| application.ingress.tls | A set of TLS configuration settings to add to the legacy ingress. | `[]` | Yes |
| application.ingress.tls.secretName | The secret that contains the TLS certs. | | Yes |
| application.ingress.tls.hosts | The hosts which use the TLS certs contained in the respective secret. | | Yes |
| application.ingress.tls.annotations | A key-value pair of ingress annotations | `{}` | Yes |


  applications:
    example-service:
      ## The application role
      ## The difference between a webapp and worker is the worker does not have ports exposed.
      ## I.e a worker does not get a Service manifest defined
      ## Validation is done to make sure the correct role is provided.
      ## Valid roles: webapp, worker
      ##
      role: webapp
      ## The number of previous ReplicaSets to be retained (optional, fefault: 1)
      revisionHistoryLimit: 3
      ## The number of pod replicas to create (optional, default: 3)
      replicaCount: 1
      ## Configures the image and image pull policy (optional, default: uses .global.image)
      image:
        ## The image repository to use for images
        repository: aruba-uxi-example
        ## The image tag to use
        tag: 1.2.3
        ## The image pull policy to use (optional, default: IfNotPresent)
        pullPolicy: IfNotPresent
      ## Attaches a service account it to the application (optional, default: uses the default service account in the namespace)
      serviceAccount:
        ## Whether to create the service account or not (optional, default: true)
        create: true
        ## The name of the service account to attach to this application (optional, default: uses the application name)
        name: service-account-name
        ## Any annotations to add the service account that is created (optional, default: {})
        annotations: {}
      ## Overrides the command from the dockerfile (optional, default: the Dockerfile command is used)
      command: []
      ## The port on the pod that is exposed. For 'role: worker' do not set this value.
      port: 8000
      ## Configures the service created (optional)
      ## Default: ClusterIP on port 80
      ##
      service:
        {}
        # type: ClusterIP
        # port: 80
      ## Enables the liveness probe on the specified path (optional)
      ## NB! for 'role:worker' this should be excluded
      ##
      livenessProbe:
        enabled: true
        path: /livez
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 1
        successThreshold: 1
        failureThreshold: 3
      ## Enables the readiness probe on the specified path (optional)
      ## NB! for 'role:worker' this should be excluded
      ##
      readinessProbe:
        enabled: true
        path: /readyz
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 1
        successThreshold: 1
        failureThreshold: 3
      ## Configure the pod resources (optional)
      ## Default: lets kubernetes set the resources
      ##
      resources:
        {}
        # limits:
        #   cpu: 100m
        #   memory: 256Mi
        # requests:
        #   cpu: 100m
        #   memory: 128Mi
      ## Configures the node selectors for the pods (optional)
      ## Default: None
      ##
      nodeSelector: {}
      ## Configures the tolerations for the pods (optional)
      ## Default: None
      ##
      tolerations: []
      ## Configures the pod affinity for the pods (optional)
      ## Default: None
      ##
      affinity: {}
      ## Configures the security context for the pods (optional)
      ## Default: None
      ##
      securityContext:
        {}
        # runAsUser: 1000
        # runAsGroup: 3000
        # fsGroup: 2000
      ## Adds a config map to the application (optional)
      ## Default: None
      ###
      configMap:
        - name: example-configmap01
          create: true
          annotations: {}
          readOnly: false
          path: /app/config
          data:
            config.json: |
              {
                foo: bar
                bing: bang
                server: {
                  host: hostname
                }
              }
        - name: example-configmap02
          create: false
          annotations: {}
          readOnly: false
          path: /app/config
      ## Environment variables set from provided key:value pair (optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## Default: None
      ##
      env:
        AWS_DEFAULT_REGION: example-service
        OVERRIDDEN_VALUE: example-service
      ## Environment variables set from the deployment fields (optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## Default: None
      ##
      envFields:
        HOST_IP: example-service
        OVERRIDDEN_FIELD_VALUE: example-service
      ## Environment variables set from sealed secrets (optional)
      ## The sealed secret and environment variable must be defined in .sealedSecrets.env
      ## Default: None
      ##
      envSealedSecrets:
        secret-name-a:
          - FOO
          - BAR
        secret-name-b:
          - BIZ
      ## Enables datadog metrics (optional)
      ## DD_ENABLED environment variable is always set.
      ## The value is taken from ".datadog.enabled" (default: false)
      ## Setting ".datadog.enabled: true" will add the necessary environment variables:
      ## - DD_ENV: value from ".global.environment"
      ## - DD_SERVICE: ".datadog.serviceName" (default: the name of the application)
      ## - DD_AGENT_HOST: value from pod metadata "status.hostIP"
      ## - DD_ENTITY_ID: value from pod metadata "metadata.uid"
      ## - DD_TRACE_ENABLED: ".datadog.traceEnabled" (default: false)
      ##
      datadog:
        enabled: false
        traceEnabled: false
        serviceName: example-service
        env:
          DD_EXTRA_ENV_VARIABLE_1: value
      ## Enables sentry (Optional)
      ## Setting ".sentry.enabled: true" will add the necessary environment variables:
      ## - SENTRY_ENVIRONMENT: value from ".global.environment"
      ## - SENTRY_DSN: value taken from the sentry-dsn sealed secret. You need to add the.sentry.dsn value
      ##
      sentry:
        enabled: false
        env:
          SENTRY_EXRA_ENV_VARIABLE_1: value
        dsn: sealed_version_of_the_base64_encoded_sentry_dsn
      ## Ability to add extra labels above the default ones add by the `aruba-uxi.labels` template (optional)
      ## Default: None
      ##
      labels: {}
      ## Configures a legacy ingress on the application (optional)
      ## Default: None
      ingress:
        useLegacyApiVersion: false
        className: nginx
        hosts:
          - host: example-service.local
            paths:
              - path: /
                type: Prefix
                backend:
                  serviceName: example-service
                  servicePort: 8000
        tls: []
        annotations: {}
        # - secretName: chart-example-tls
        #   hosts:
        #     - example-service.local
      ## Mounts one or more sealed secrets to a location on the file system (optional)
      ## Each key in the sealed secret will be mounted as a file under `secretMount.[n].path`
      ## Default: None
      ###
      secretMount:
        - name: secret-name
          readOnly: true
          path: /path/to/mount/folder
    example-worker:
      ## The application role
      ## The difference between a webapp and worker is the worker does not have ports exposed.
      ## I.e a worker does not get a Service manifest defined
      ## Valid roles: webapp | worker
      ##
      role: worker
      ## Sets the replica count (optional)
      ## Default: 1
      ##
      revisionHistoryLimit: 3
      ## Sets number of old ReplicaSets for this deployment to be retained (optional)
      ## Default: 3
      ##
      replicaCount: 1
      ## Configures the image and image pull policy (optional)
      ## Default: uses .global.image
      ##
      image:
        {}
        # repository: nginx
        # pullPolicy: IfNotPresent
        # tag: ""
      ## Attaches a service account it to the application (optional)
      ## Default: uses the default service account in the namespace
      ##
      serviceAccount:
        # create: false
        name: example-worker-external-service-account
        # annotations: {}
      ## Overrides the command from the dockerfile (optional)
      ## Default: the Dockerfile command is used
      ##
      command: ["printenv"]
      ## args for the container command (optional)
      ##
      args: ["HOSTNAME", "KUBERNETES_PORT"]
      ## Which port on the pod is exposed.
      ## NB! for 'role: worker' do not set this
      ##
      port: 8000
      ## Configures the service created (optional)
      ## Default: ClusterIP on port 80
      ##
      service:
        {}
        # type: ClusterIP
        # port: 80
      ##
      ## Enables the liveness probe to run the specified command (optional)
      ##
      livenessProbe:
        command: ["ls -a"]
      ## Enables the readiness probe to run the specified command (optional)
      ##
      readinessProbe:
        command: ["ls -a"]
      ## Configure the pod resources (optional)
      ## Default: lets kubernetes set the resources
      ##
      resources:
        {}
        # limits:
        #   cpu: 100m
        #   memory: 256Mi
        # requests:
        #   cpu: 100m
        #   memory: 128Mi
      ## Configures the node selectors for the pods (optional)
      ## Default: None
      ##
      nodeSelector: {}
      ## Configures the tolerations for the pods (optional)
      ## Default: None
      ##
      tolerations: []
      ## Configures the pod affinity for the pods (optional)
      ## Default: None
      ##
      affinity: {}
      ## Configures the security context for the pods (optional)
      ## Default: None
      ##
      securityContext:
        {}
        # runAsUser: 1000
        # runAsGroup: 3000
        # fsGroup: 2000
        ## Adds a config map to the application (optional)
      ## Default: None
      ###
      configMap:
        annotations: {}
        readOnly: false
        path: /app/config
        data:
          config.json: |
            "hello worker"
      ## Environment variables set from provided key:value pair (optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## Default: None
      ##
      env:
        AWS_DEFAULT_REGION: example-worker
        OVERRIDDEN_VALUE: example-worker
      ## Environment variables set from the deployment fields (optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## Default: None
      ##
      envFields:
        HOST_IP: example-worker
        OVERRIDDEN_FIELD_VALUE: example-worker
      ## Environment variables set from sealed secrets (optional)
      ## The sealed secret and environment variable must be defined in .sealedSecrets.env
      ## Default: None
      ##
      envSealedSecrets:
        secret-name-a:
          - FOO
          - BAR
        secret-name-b:
          - BIZ
      ## Enables datadog metrics (optional)
      ## DD_ENABLED environment variable is always set.
      ## The value is taken from ".datadog.enabled" (default: false)
      ## Setting ".datadog.enabled: true" will add the necessary environment variables:
      ## - DD_ENV: value from ".global.environment"
      ## - DD_SERVICE: ".datadog.serviceName" (default: the name of the application)
      ## - DD_AGENT_HOST: value from pod metadata "status.hostIP"
      ## - DD_ENTITY_ID: value from pod metadata "metadata.uid"
      ## - DD_TRACE_ENABLED: ".datadog.traceEnabled" (default: false)
      ##
      datadog:
        enabled: false
        traceEnabled: false
        serviceName: example-worker
        env:
          DD_EXTRA_ENV_VARIABLE_1: value1
      ## Enables sentry (Optional)
      ## Setting ".sentry.enabled: true" will add the necessary environment variables:
      ## - SENTRY_ENVIRONMENT: value from ".global.environment"
      ## - SENTRY_DSN: value taken from the sentry-dsn sealed secret. You need to add the.sentry.dsn value
      ##
      sentry:
        enabled: false
        env:
          SENTRY_EXRA_ENV_VARIABLE_1: value
        dsn: sealed_version_of_the_base64_encoded_sentry_dsn
      ## Ability to add extra labels above the default ones add by the `aruba-uxi.labels` template (optional)
      ## Default: None
      ##
      labels: {}
  ## Creates one or more cronjobs.
  ## Cronjobs are defined as keys in the applications map
  ## The key is used as the name of the cronjob and subsequent objects created
  ##
  cronjobs:
    example-cronjob-producer:
      ## The schedule for the cronjob
      ##
      schedule: "*/10 * * * *"
      ## Suspends the cronjob (optional)
      ## Default: false
      ##
      suspend: false
      ## Configures the image and image pull policy (optional)
      ## Default: uses .global.image
      ##
      image: {}
      ## Overrides the command from the dockerfile (optional)
      ## Default: the Dockerfile command is used
      ##
      command: ["run-kinesis", "producer"]
      ## Attaches a service account it to the application (optional)
      ## Default: uses the default service account in the namespace
      ##
      serviceAccount:
        create: true
        name: example-cronjob-producer-service-account
        # annotations: {}
      ## Whether the cronjob should restart if a job fails (optional)
      ## Default: OnFailure
      ##
      restartPolicy: OnFailure
      ## Environment variables set from provided key:value pair (optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## Default: None
      ##
      env:
        AWS_DEFAULT_REGION: example-cronjob-producer
        OVERRIDDEN_VALUE: example-cronjob-producer
      ## Environment variables set from the deployment fields (optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## Default: None
      ##
      envFields:
        HOST_IP: example-cronjob-producer
        OVERRIDDEN_FIELD_VALUE: example-cronjob-producer
      ## Environment variables set from sealed secrets (optional)
      ## The sealed secret and environment variable must be defined in .sealedSecrets.env
      ## Default: None
      ##
      envSealedSecrets:
        secret-name-a:
          - FOO
          - BAR
        secret-name-b:
          - BIZ
      ## Enables datadog metrics (optional)
      ## DD_ENABLED environment variable is always set.
      ## The value is taken from ".datadog.enabled" (default: false)
      ## Setting ".datadog.enabled: true" will add the necessary environment variables:
      ## - DD_ENV: value from ".global.environment"
      ## - DD_SERVICE: ".datadog.serviceName" (default: the name of the application)
      ## - DD_AGENT_HOST: value from pod metadata "status.hostIP"
      ## - DD_ENTITY_ID: value from pod metadata "metadata.uid"
      ## - DD_TRACE_ENABLED: ".datadog.traceEnabled" (default: false)
      ##
      datadog:
        enabled: false
        traceEnabled: false
        serviceName: example-cronjob-producer
        env:
          DD_EXTRA_ENV_VARIABLE_1: value1
      ## Enables sentry (Optional)
      ## Setting ".sentry.enabled: true" will add the necessary environment variables:
      ## - SENTRY_ENVIRONMENT: value from ".global.environment"
      ## - SENTRY_DSN: value taken from the sentry-dsn sealed secret. You need to add the.sentry.dsn value
      ##
      sentry:
        enabled: false
        env:
          SENTRY_EXRA_ENV_VARIABLE_1: value
        dsn: sealed_version_of_the_base64_encoded_sentry_dsn
      ## Ability to add extra labels above the default ones add by the `aruba-uxi.labels` template (optional)
      ## Default: None
      ##
      labels: {}
    example-cronjob-consumer:
      ## The schedule for the cronjob
      ##
      schedule: "*/5 * * * *"
      ## Suspends the cronjob (optional)
      ## Default: false
      ##
      suspend: false
      ## Overrides the command from the dockerfile (optional)
      ## Default: the Dockerfile command is used
      ##
      command: ["run-kinesis", "consumer"]
      ## Attaches a service account it to the application (optional)
      ## Default: uses the default service account in the namespace
      ##
      serviceAccount:
        create: false
        name: example-cronjob-consumer-service-account
      ## Whether the cronjob should restart if a job fails (optional)
      ## Default: OnFailure
      ##
      restartPolicy: OnFailure
      ## Environment variables set from provided key:value pair (optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## Default: None
      ##
      env:
        AWS_DEFAULT_REGION: example-cronjob-consumer
        OVERRIDDEN_VALUE: example-cronjob-consumer
      ## Environment variables set from the deployment fields (optional)
      ## If overridden, in application or cronjobs, precedence is given to the overridden values
      ## Default: None
      ##
      envFields:
        HOST_IP: example-cronjob-consumer
        OVERRIDDEN_FIELD_VALUE: example-cronjob-consumer
      ## Environment variables set from sealed secrets (optional)
      ## The sealed secret and environment variable must be defined in .sealedSecrets.env
      ## Default: None
      ##
      envSealedSecrets:
        secret-name-a:
          - FOO
          - BAR
        secret-name-b:
          - BIZ
      ## Enables datadog metrics (optional)
      ## DD_ENABLED environment variable is always set.
      ## The value is taken from ".datadog.enabled" (default: false)
      ## Setting ".datadog.enabled: true" will add the necessary environment variables:
      ## - DD_ENV: value from ".global.environment"
      ## - DD_SERVICE: ".datadog.serviceName" (default: the name of the application)
      ## - DD_AGENT_HOST: value from pod metadata "status.hostIP"
      ## - DD_ENTITY_ID: value from "metadata.uid"
      ## - DD_TRACE_ENABLED: ".datadog.traceEnabled" (default: false)
      ##
      datadog:
        enabled: false
        traceEnabled: false
        serviceName: example-cronjob-consumer
        env:
          DD_EXTRA_ENV_VARIABLE_1: value1
      ## Enables sentry (Optional)
      ## Setting ".sentry.enabled: true" will add the necessary environment variables:
      ## - SENTRY_ENVIRONMENT: value from ".global.environment"
      ## - SENTRY_DSN: value taken from the sentry-dsn sealed secret. You need to add the.sentry.dsn value
      ##
      sentry:
        enabled: false
        env:
          SENTRY_EXRA_ENV_VARIABLE_1: value
        dsn: sealed_version_of_the_base64_encoded_sentry_dsn
      ## Ability to add extra labels above the default ones add by the `aruba-uxi.labels` template (optional)
      ## Default: None
      ##
      labels: {}
