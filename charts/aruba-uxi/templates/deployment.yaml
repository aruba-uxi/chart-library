{{- range $name, $data := .Values.applications }}
{{- $sealedSecrets := default dict $.Values.sealedSecrets }}
{{- $overrideImage := default dict $data.image }}
{{- $datadog := default dict $data.datadog }}
{{- $sentry := default dict $data.sentry }}
{{- $readinessProbe := default dict $data.readinessProbe }}
{{- $livenessProbe := default dict $data.livenessProbe }}
{{- $envBasic := deepCopy (default dict $.Values.global.env) | mustMerge (default dict $data.env) }}
{{- $envFields := deepCopy (default dict $.Values.global.envFields) | mustMerge (default dict $data.envFields) }}
{{- $envSealedSecrets := $data.envSealedSecrets }}
{{- $additionalLabels := deepCopy (default dict $.Values.global.labels) | mustMerge (default dict $data.labels) }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $name }}
  labels:
    {{- include "aruba-uxi.labels" (dict "context" $ "name" $name "additionalLabels" $additionalLabels) | nindent 4 }}
spec:
  {{- if hasKey $data "replicaCount" }}
  replicas: {{ $data.replicaCount }}
  {{- else }}
  replicas: 1
  {{- end }}
  selector:
    matchLabels:
      {{- include "aruba-uxi.selectorLabels" (dict "context" $ "name" $name) | nindent 6 }}
  revisionHistoryLimit: {{ default 3 $data.revisionHistoryLimit }}
  template:
    metadata:
      labels:
        {{- include "aruba-uxi.labels" (dict "context" $ "name" $name "additionalLabels" $additionalLabels) | nindent 8 }}
    spec:
      {{- if $sealedSecrets.imagePullSecret }}
      imagePullSecrets:
      - name: {{ include "sealedImagePullSecret.name" (dict "context" $) }}
      {{- end }}
      {{- if $data.serviceAccount }}
      serviceAccountName: {{ include "serviceAccount.name" (dict "name" $name "data" $data) }}
      {{- end }}
      containers:
      - name: {{ include "application.role" (dict "role" $data.role) }}
        image: {{ include "aruba-uxi.image" (dict "context" $ "data" $overrideImage) }}
        imagePullPolicy: {{ include "aruba-uxi.imagePullPolicy" (dict "context" $ "data" $overrideImage) }}
        {{- with $data.command }}
        command: {{ toRawJson . }}
        {{- end }}
        {{- with $data.args }}
        args: {{ toRawJson . }}
        {{- end }}
        env:
        - name: APPLICATION_NAME
          value: {{ $name | quote }}
        - name: ENVIRONMENT
          value: {{ include "global.environment" (dict "environment" $.Values.global.environment) | quote }}
        - name: DD_ENABLED
          value: {{ default "false" $datadog.enabled | quote }}
        {{- if $datadog.enabled }}
        - name: DD_ENV
          value: {{ include "global.environment" (dict "environment" $.Values.global.environment) | quote }}
        - name: DD_SERVICE
          value: {{ $name | quote }}
        - name: DD_TRACE_ENABLED
          value: {{ default "false" $datadog.traceEnabled | quote }}
        - name: DD_AGENT_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: DD_ENTITY_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        {{- end }}
        {{- if $sentry.enabled }}
        - name: SENTRY_ENVIRONMENT
          value: {{ include "global.environment" (dict "environment" $.Values.global.environment) | quote }}
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: {{ template "sealedSentryDsn.name" (dict "name" $name) }}
              key: SENTRY_DSN
        {{- end }}
        {{- if or $envBasic $envFields $envSealedSecrets }}
        {{- include "aruba-uxi.env-variables" (dict "data" $envBasic) | indent 8 }}
        {{- include "aruba-uxi.env-fields" (dict "data" $envFields) | indent 8 }}
        {{- include "aruba-uxi.env-sealed-secrets" (dict "name" $name "data" $envSealedSecrets) | indent 8 }}
        {{- end }}
        {{- if $data.port }}
        ports:
        - name: http
          containerPort: {{ $data.port }}
          protocol: TCP
        {{- end }}
        {{- if $readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            httpHeaders:
            - name: Host
              value: readinessProbe
            - name: Content-Type
              value: application/json
            path: {{ default "/readyz" $readinessProbe.path }}
            port: {{ $data.port }}
          initialDelaySeconds: {{ default "10" $readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ default "10" $readinessProbe.periodSeconds }}
          timeoutSeconds: {{ default "1" $readinessProbe.timeoutSeconds }}
          successThreshold: {{ default "1" $readinessProbe.successThreshold }}
          failureThreshold: {{ default "3" $readinessProbe.failureThreshold }}
        {{- end }}
        {{- if $livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            httpHeaders:
            - name: Host
              value: livenessProbe
            - name: Content-Type
              value: application/json
            path: {{ default "/livez" $livenessProbe.path }}
            port: {{ $data.port }}
          initialDelaySeconds: {{ default "10" $livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ default "10" $livenessProbe.periodSeconds }}
          timeoutSeconds: {{ default "1" $livenessProbe.timeoutSeconds }}
          successThreshold: {{ default "1" $livenessProbe.successThreshold }}
          failureThreshold: {{ default "3" $livenessProbe.failureThreshold }}
        {{- end }}
        {{- with $data.resources }}
        resources:
          {{- toYaml . | nindent 12 }}
        {{- end }}
        {{- if $data.parallel }}
        parallelism: {{ $data.parallel }}
        {{- end }}
        {{- if or $data.configMap $data.secretMount }}
        volumeMounts:
        {{- if $data.configMap }}
        - name: config
          mountPath: {{ $data.configMap.path }}
          readOnly: {{ default true $data.configMap.readOnly }}
        {{- end }}
        {{- if $data.secretMount }}
        {{- range $secretMountData := $data.secretMount }}
        - name: {{ $secretMountData.name }}
          mountPath: {{ $secretMountData.path}}
          readOnly: {{ default true $secretMountData.readOnly }}
        {{- end }}
        {{- end }}
        {{- end }}
      {{- with $data.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $data.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $data.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or $data.configMap $data.secretMount }}
      volumes:
      {{- if $data.configMap }}
      - name: config
        configMap:
          name: {{ $name }}
      {{- end }}
      {{- if $data.secretMount }}
      {{- range $secretMountData := $data.secretMount }}
      - name: {{ $secretMountData.name }}
        secret:
          secretName: {{ toYaml $secretMountData.name }}
      {{- end }}
      {{- end }}
      {{- end }}
      {{- with $data.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
