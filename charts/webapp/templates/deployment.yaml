{{- range $appData := .Values.applications }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $appData.name }}
  labels:
    name: {{ $appData.name }}
    app: {{ $appData.name }}
    repo: {{ $appData.labels.repo }}
    version: {{ $.Chart.Version }}
spec:
  replicas: {{ $appData.replicaCount }}
  selector:
    matchLabels:
      app: {{ $appData.name }}
  template:
    metadata:
      labels:
        name: {{ $appData.name }}
        app: {{ $appData.name }}
        repo: {{ $appData.labels.repo }}
        version: {{ $.Chart.Version }}
    spec:
      {{- if $appData.sealedImagePullSecret }}
      imagePullSecrets:
      - name: sealed-image-pull-secret
      {{- end }}
      {{- if $appData.serviceAccount }}
      serviceAccountName: {{ $appData.serviceAccount.name }}
      {{- end }}
      containers:
        - name: {{ $appData.name }}
          image: "{{ $appData.image.repository }}:{{ $appData.image.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ $appData.image.pullPolicy | default "IfNotPresent" }}
          {{- if $appData.command }}
          command: {{ toRawJson $appData.command }}
          {{- end }}
          {{- if $appData.env }}
          env:
          {{- range $key, $val := $appData.env }}
          - name: {{ $key }}
            value: {{ $val | quote }}
          {{- end }}
          {{- end }}
          {{- if $appData.envFields -}}
          {{- range $key, $val := $appData.envFields }}
          - name: {{ $key }}
            valueFrom:
            fieldRef:
              fieldPath: {{ $val }}
          {{- end -}}
          {{- end -}}
          {{- if $appData.envSealedSecrets -}}
          {{- range $secretName, $secretData := $appData.envSealedSecrets }}
          {{- range $envName, $secretValue := $secretData }}
          - name: {{ $envName }}
            valueFrom:
            secretKeyRef:
              name: {{ $secretName }}
              key: {{ $envName }}
          {{- end -}}
          {{- end -}}
          {{- end -}}
          {{- if $appData.port }}
          ports:
          - name: {{ $appData.port.name }}
            containerPort: {{ $appData.port.containerPort }}
            protocol: {{ $appData.port.protocol | default "TCP" }}
          {{- end }}
          {{- if $appData.readinessProbe }}
          readinessProbe:
            httpGet:
              httpHeaders:
              - name: Host
                value: readinessProbe
              - name: Content-Type
                value: application/json
              path: {{ $appData.readinessProbe.path }}
              port: {{ $appData.port }}
            initialDelaySeconds: {{ $appData.readinessProbe.initialDelaySeconds | default "5" }}
            periodSeconds: {{ $appData.readinessProbe.periodSeconds | default "3" }}
          {{- end }}
          {{- if $appData.livenessProbe }}
          livenessProbe:
            httpGet:
              httpHeaders:
              - name: Host
                value: livenessProbe
              - name: Content-Type
                value: application/json
              path: {{ $appData.livenessProbe.path }}
              port: {{ $appData.port }}
            initialDelaySeconds: {{ $appData.livenessProbe.initialDelaySeconds | default "5" }}
            periodSeconds: {{ $appData.livenessProbe.periodSeconds | default "3" }}
          {{- end }}
          resources:
            {{- toYaml $appData.resources | nindent 12 }}
          {{- if $appData.parallel }}
          parallelism: {{ $appData.parallel }}
          {{- end }}
          {{- if $appData.configmap }}
          volumeMounts:
          - name: config
            mountPath: {{ $appData.configmap.path }}
          {{- end }}
      {{- with $appData.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $appData.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $appData.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if $appData.configmap }}
      volumes:
      - name: config
        configMap:
          name: {{ $appData.configmap.name }}
      {{- end }}
{{- end }}
