{{- range $name, $data := .Values.applications }}
{{- $overrideImage := default dict $data.image }}
{{- $envBasic := deepCopy $.Values.global.env | mustMerge (default dict $data.env) }}
{{- $envFields := deepCopy $.Values.global.envFields | mustMerge (default dict $data.envFields) }}
{{- $envSealedSecrets := deepCopy $.Values.global.envSealedSecrets | mustMerge (default dict $data.envSealedSecrets) }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $name }}
  labels:
    {{- include "application.labels" (dict "context" $ "name" $name) | nindent 4 }}
spec:
  replicas: {{ $data.replicaCount | default 1 }}
  selector:
    matchLabels:
      {{- include "application.selectorLabels" (dict "context" $ "name" $name) | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "application.labels" (dict "context" $ "name" $name) | nindent 8 }}
    spec:
      {{- if $.Values.global.sealedImagePullSecret }}
      imagePullSecrets:
      - name: {{ include "sealedImagePullSecret.name" "" }}
      {{- end }}
      {{- if $data.serviceAccount }}
      serviceAccountName: {{ template "serviceAccount.name" (dict "context" $ "name" $name "data" $data) }}
      {{- end }}
      containers:
        - name: {{ $data.role }}
          image: "{{ default $.Values.global.image.repository $overrideImage.repository }}:{{ default $.Values.global.image.tag $overrideImage.tag }}"
          imagePullPolicy: {{ default $.Values.global.image.pullPolicy $overrideImage.pullPolicy }}
          {{- with $data.command }}
          command: {{ toRawJson . }}
          {{- end }}
          env:
          - name: ENVIRONMENT
            value: {{ lower $.Values.global.environment | quote }}
          {{- if or $envBasic $envFields $envSealedSecrets }}
          {{- include "application.env-variables" (dict "context" $ "data" $envBasic) | indent 10 }}
          {{- include "application.env-fields" (dict "context" $ "data" $envFields) | indent 10 }}
          {{- include "application.env-sealed-secrets" (dict "context" $ "name" $name "data" $envSealedSecrets) | indent 10 }}
          {{- end }}
          {{- if $data.port }}
          ports:
          - name: http
            containerPort: {{ $data.port }}
            protocol: TCP
          {{- end }}
          {{- if $data.readinessProbe }}
          readinessProbe:
            httpGet:
              httpHeaders:
              - name: Host
                value: readinessProbe
              - name: Content-Type
                value: application/json
              path: {{ $data.readinessProbe.path }}
              port: {{ $data.port }}
            initialDelaySeconds: {{ default "10" $data.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ default "10" $data.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ default "1" $data.readinessProbe.timeoutSeconds }}
            successThreshold: {{ default "1" $data.readinessProbe.successThreshold }}
            failureThreshold: {{ default "3" $data.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if $data.livenessProbe }}
          livenessProbe:
            httpGet:
              httpHeaders:
              - name: Host
                value: livenessProbe
              - name: Content-Type
                value: application/json
              path: {{ $data.livenessProbe.path }}
              port: {{ $data.port }}
            initialDelaySeconds: {{ default "10" $data.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ default "10" $data.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ default "1" $data.livenessProbe.timeoutSeconds }}
            successThreshold: {{ default "1" $data.livenessProbe.successThreshold }}
            failureThreshold: {{ default "3" $data.livenessProbe.failureThreshold }}
          {{- end }}
          {{- with $data.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if $data.parallel }}
          parallelism: {{ $data.parallel }}
          {{- end }}
          {{- if $data.configMap }}
          volumeMounts:
          - name: config
            mountPath: {{ $data.configMap.path }}
            readOnly: {{ default true $data.configMap.readOnly }}
          {{- end }}
      {{- with $data.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $data.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $data.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if $data.configMap }}
      volumes:
      - name: config
        configMap:
          name: {{ $name }}
      {{- end }}
      {{- with $data.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
